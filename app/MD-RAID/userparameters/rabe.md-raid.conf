#
# Zabbix user parameters for Linux multi device RAID (MD RAID) monitoring
#
# Copyright (c) 2017 Radio Bern RaBe
#                    http://www.rabe.ch
#
# This parameter collection is free software: you can redistribute it
# and/or modify it under the terms of the GNU Affero General Public
# License as published  by the Free Software Foundation, version
# 3 of the License.
#
# This collection is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License  along with this program.
# If not, see <http://www.gnu.org/licenses/>.#
#
# Please submit enhancements, bugfixes or comments via GitHub:
# https://github.com/radiorabe/rabe-zabbix
#
# For more information regarding the MD sysfs structure, refer to
# https://www.kernel.org/doc/html/latest/admin-guide/md.html
#

#
# Discovery rule for getting a list of all available raid devices (MD)
#
# find searches for raid device directories named "md" below /sys/block and awk
# returns them in the following format:
#
# {
#   "data": [
#     {
#       "{#MD_RAID_RAID_DEV_NAME}": "md0"
#     },
#     {
#       "{#MD_RAID_RAID_DEV_NAME}": "md1"
#     }
#   ]
# }
#
# Note, that the awk field parameters ($1 - $N) do not require double dollar
# sign escaping ($$1) in discovery rules as they normally would within user
# parameters containing Zabbix positional references. In fact, it would break
# the discovery rule.
UserParameter=rabe.raid.md.raid-device.discovery,/usr/bin/find -L /sys/block/ -maxdepth 2 -type d -name md 2>/dev/null | /usr/bin/awk -F '/' 'BEGIN { printf "{\"data\":[" } { printf sep"{\"{#MD_RAID_RAID_DEV_NAME}\":\""$4"\"}"; sep = "," } END { printf "]}" }'


#
# Discovery rule for getting a list of all component devices (RD)
#
# Returns a mapping between raid devices and their corresponding component
# devices.
# find searches for MD RAID component device directories named "md/rdN[N]" below
# /sys/block and awk returns them in the following format:
#
# {
#   "data": [
#     {
#       "{#MD_RAID_RAID_DEV_NAME}": "md0",
#       "{#MD_RAID_COMPONENT_DEV_NAME}": "rd0"
#     },
#     {
#       "{#MD_RAID_RAID_DEV_NAME}": "md0",
#       "{#MD_RAID_COMPONENT_DEV_NAME}": "rd1"
#     },
#     {
#       "{#MD_RAID_RAID_DEV_NAME}": "md1",
#       "{#MD_RAID_COMPONENT_DEV_NAME}": "rd0"
#     },
#     {
#       "{#MD_RAID_RAID_DEV_NAME}": "md1",
#       "{#MD_RAID_COMPONENT_DEV_NAME}": "rd1"
#     }
#   ]
# }
#
# Note, that the awk field parameters ($1 - $N) do not require double dollar
# sign escaping ($$1) in discovery rules as they normally would within user
# parameters containing Zabbix positional references. In fact, it would break
# the discovery rule.
UserParameter=rabe.raid.md.component-device.discovery,/usr/bin/find -L /sys/block/ -maxdepth 3 -type d -path '*/md/rd[0-9]*' 2>/dev/null | /usr/bin/awk -F '/' 'BEGIN { printf "{\"data\":[" } { printf sep"{\"{#MD_RAID_RAID_DEV_NAME}\":\""$4"\","; printf "\"{#MD_RAID_COMPONENT_DEV_NAME}\":\""$6"\"}"; sep = "," } END { printf "]}" }'


#
# Block device name of a specific component device (RD)
#
# Returns a string with the block device name (e.g. sda3) of a given component
# device of an array.
# The data is returned from the sysfs symlink target of
# /sys/block/<MD-NAME>/md/<RD-NAME>/block
#
# Arguments:
# - $1 = MD device (raid) name (such as md0)
# - $2 = RD device (component) name (such as rd0)
UserParameter=rabe.raid.md.component-device.block-dev[*],$(which basename) $(/usr/bin/realpath /sys/block/$1/md/$2/block 2>/dev/null || readlink -e /sys/block/$1/md/$2/block)
