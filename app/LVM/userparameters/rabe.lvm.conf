#
# Zabbix user parameters for Linux logical volume management (LVM) monitoring
#
# Copyright (c) 2017 Radio Bern RaBe
#                    http://www.rabe.ch
#
# This parameter collection is free software: you can redistribute it
# and/or modify it under the terms of the GNU Affero General Public 
# License as published  by the Free Software Foundation, version
# 3 of the License.
#
# This collection is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License  along with this program.
# If not, see <http://www.gnu.org/licenses/>.#
#
# Please submit enhancements, bugfixes or comments via GitHub:
# https://github.com/radiorabe/rabe-zabbix
#

#
# Discovery rule for getting a list of all available physical volumes (PV)
#
# Data gets parsed from the pvs command output and returned in the following
# format:
#
# {
#    "data" : [
#       {
#          "{#LVM_PV_NAME}" : "/dev/sda"
#          "{#LVM_PV_UUID}" : "S1qfoV-Jbmw-qjqH-koz3-HEyh-eNme-eHlBe8",
#          "{#LVM_PV_TYPE}" : "lvm2",
#       },
#       {
#          "{#LVM_PV_NAME}" : "/dev/sdb",
#          "{#LVM_PV_UUID}" : "R8ptEr-Jggk-cmc4-OXew-V69X-snKQ-z0Wh14"
#          "{#LVM_PV_TYPE}" : "lvm2",
#       }
#    ]
# }
#
#
# Note, that the awk field parameters ($1 - $N) do not require double dollar
# sign escaping ($$1) in discovery rules as they normally would within user
# parameters containing Zabbix positional references. In fact, it would break
# the discovery rule.
UserParameter=rabe.lvm.pvs.discovery,/usr/bin/sudo /sbin/pvs --noheadings --options pv_name,pv_uuid,pv_fmt | /usr/bin/awk 'BEGIN { printf "{\"data\":[" } { printf sep"{\"{#LVM_PV_NAME}\":\""$1"\","; printf "\"{#LVM_PV_UUID}\":\""$2"\","; printf "\"{#LVM_PV_TYPE}\":\""$3"\"}"; sep = "," } END { printf "]}" }'


#
# Discovery rule for getting a list of all available volume groups (VG)
#
# Data gets parsed from the vgs command output and returned in the following
# format:
#
# {
#    "data" : [
#       {
#          "{#LVM_VG_NAME}" : "vg_example_01",
#          "{#LVM_VG_UUID}" : "s83QZR-w6c4-Ngqk-u1fM-STAl-evYq-MLxiN0"
#          "{#LVM_VG_TYPE}" : "lvm2",
#       },
#       {
#          "{#LVM_VG_NAME}" : "vg_example_02"
#          "{#LVM_VG_UUID}" : "hcIP3e-54FS-mFeY-CjdB-IZPp-LRM1-aTdEcm",
#          "{#LVM_VG_TYPE}" : "lvm2",
#       }
#    ]
# }
#
#
# Note, that the awk field parameters ($1 - $N) do not require double dollar
# sign escaping ($$1) in discovery rules as they normally would within user
# parameters containing Zabbix positional references. In fact, it would break
# the discovery rule.
UserParameter=rabe.lvm.vgs.discovery,/usr/bin/sudo /sbin/vgs --noheadings --options vg_name,vg_uuid,vg_fmt | /usr/bin/awk 'BEGIN { printf "{\"data\":[" } { printf sep"{\"{#LVM_VG_NAME}\":\""$1"\","; printf "\"{#LVM_VG_UUID}\":\""$2"\","; printf "\"{#LVM_VG_TYPE}\":\""$3"\"}"; sep = "," } END { printf "]}" }'


#
# Discovery rule for getting a list of all available logical volumes (LV)
#
# Data gets parsed from the lvs command output and returned in the following
# format:
#
# {
#    "data" : [
#       {
#          "{#LVM_LV_FULL_NAME}" : "vg_example_01/lv_example_01"
#          "{#LVM_LV_UUID}" : "dxi5Hw-Xo2m-SAVi-ypZh-QO4I-krpI-sR3N67",
#          "{#LVM_LV_TYPE}" : "linear",
#          "{#LVM_LV_ROLE}" : "public,origin,thickorigin",
#          "{#LVM_LV_NAME}" : "lv_example_01"
#          "{#LVM_LV_VG_NAME}" : "vg_example_01"
#          "{#LVM_LV_PATH}" : "/dev/vg_example_01/lv_example_01",
#       },
#       {
#          "{#LVM_LV_FULL_NAME}" : "vg_example_02/lv_example_02",
#          "{#LVM_LV_UUID}" : "7rbSqn-Lnow-Xzpk-LdWf-w7ed-xGMQ-40qFd2",
#          "{#LVM_LV_TYPE}" : "thin"
#          "{#LVM_LV_ROLE}" : "public"
#          "{#LVM_LV_NAME}" : "lv_example_02"
#          "{#LVM_LV_VG_NAME}" : "vg_example_02"
#          "{#LVM_LV_PATH}" : "/dev/vg_example_02/lv_example_02",
#       },
#       {
#          "{#LVM_LV_FULL_NAME}" : "vg_example_02/lv_example_02_thin_pool_01",
#          "{#LVM_LV_UUID}" : "UsCiDV-0B7p-krKP-1g1a-m17h-qo2J-E9xiTa",
#          "{#LVM_LV_TYPE}" : "thin-pool",
#          "{#LVM_LV_ROLE}" : "private",
#          "{#LVM_LV_NAME}" : "lv_exmaple_02_thin_pool_01"
#          "{#LVM_LV_VG_NAME}" : "vg_example_02"
#          "{#LVM_LV_PATH}" : ""
#       },
#       {
#          "{#LVM_LV_FULL_NAME}" : "vg_example_01/snap_lv_example_01"
#          "{#LVM_LV_UUID}" : "nSdv5J-9Ovx-3A4S-ls5b-Ji6x-0fvQ-CeocLl",
#          "{#LVM_LV_TYPE}" : "linear",
#          "{#LVM_LV_ROLE}" : "public,snapshot,thicksnapshot",
#          "{#LVM_LV_NAME}" : "snap_lv_example_01"
#          "{#LVM_LV_VG_NAME}" : "vg_example_01"
#          "{#LVM_LV_PATH}" : "/dev/vg_example_01/snap_lv_example_01",
#       }
#    ]
# }
#
# Note, that the awk field parameters ($1 - $N) require double dollar sign
# escaping ($$1) to prevent them from being interpreted as Zabbix positional
# references.
UserParameter=rabe.lvm.lvs.discovery[*],/usr/bin/sudo /sbin/lvs --noheadings --options lv_full_name,lv_uuid,segtype,lv_role,lv_name,vg_name,lv_path,lv_kernel_minor | /usr/bin/awk 'BEGIN { printf "{\"data\":[" } { printf sep"{\"{#LVM_LV_FULL_NAME}\":\""$$1"\","; printf "\"{#LVM_LV_UUID}\":\""$$2"\","; printf "\"{#LVM_LV_TYPE}\":\""$$3"\","; printf "\"{#LVM_LV_ROLE}\":\""$$4"\","; printf "\"{#LVM_LV_NAME}\":\""$$5"\","; printf "\"{#LVM_LV_VG_NAME}\":\""$$6"\","; printf "\"{#LVM_LV_PATH}\":\""$$7"\","; printf "\"{#LVM_LV_DM}\":\"dm-"$$8"\"}"; sep = "," } END { printf "]}" }'


#
# Get information about a physical volume (PV)
#
# Returns an information about an LVM physical volume.
# Data gets parsed from the pvs command output (man 8 pvs), all units are in
# bytes.
#
# Arguments:
# - $1 = physical volume name, for example "/dev/sda"
# - $2 = option/column to display (see "pvs -o help")
# 
# Note, that the awk field parameters ($1 - $N) require double dollar sign
# escaping ($$1) to prevent them from being interpreted as Zabbix positional
# references.
UserParameter=rabe.lvm.pvs.value[*],/usr/bin/sudo /sbin/pvs --noheadings --nosuffix --units b --options '$2' '$1' | /usr/bin/awk '{ print $$1 }'


#
# Get information about a volume group (VG)
#
# Returns an information about an LVM volume group.
# Data gets parsed from the vgs command output (man 8 vgs), all units are in
# bytes.
#
# Arguments:
# - $1 = volume group name, for example "vg_example_01"
# - $2 = option/column to display (see "vgs -o help")
# 
# Note, that the awk field parameters ($1 - $N) require double dollar sign
# escaping ($$1) to prevent them from being interpreted as Zabbix positional
# references.
UserParameter=rabe.lvm.vgs.value[*],/usr/bin/sudo /sbin/vgs --noheadings --nosuffix --units b --options '$2' '$1' | /usr/bin/awk '{ print $$1 }'


#
# Get information about a logical volume (LV)
#
# Returns an information about an LVM logical volume.
# Data gets parsed from the lvs command output (man 8 lvs), all units are in
# bytes.
#
# Arguments:
# - $1 = logical volume path, for example "vg_example_01/lv_example_01"
# - $2 = option/column to display (see "lvs -o help")
# 
# Note, that the awk field parameters ($1 - $N) require double dollar sign
# escaping ($$1) to prevent them from being interpreted as Zabbix positional
# references.
UserParameter=rabe.lvm.lvs.value[*],/usr/bin/sudo /sbin/lvs --noheadings --nosuffix --units b --options '$2' '$1' | /usr/bin/awk '{ print $$1 }'
UserParameter=rabe.lvm.lv.read.ops[*],awk '{print $$1}' /sys/class/block/$1/stat
UserParameter=rabe.lvm.lv.read.merged[*],awk '{print $$2}' /sys/class/block/$1/stat
UserParameter=rabe.lvm.lv.read.sectors[*],awk '{print $$3}' /sys/class/block/$1/stat
UserParameter=rabe.lvm.lv.read.ms[*],awk '{print $$4}' /sys/class/block/$1/stat
UserParameter=rabe.lvm.lv.write.ops[*],awk '{print $$5}' /sys/class/block/$1/stat
UserParameter=rabe.lvm.lv.write.merged[*],awk '{print $$6}' /sys/class/block/$1/stat
UserParameter=rabe.lvm.lv.write.sectors[*],awk '{print $$7}' /sys/class/block/$1/stat
UserParameter=rabe.lvm.lv.write.ms[*],awk '{print $$8}' /sys/class/block/$1/stat
UserParameter=rabe.lvm.lv.io.active[*],awk '{print $$9}' /sys/class/block/$1/stat
UserParameter=rabe.lvm.lv.io.ms[*],awk '{print $$10}' /sys/class/block/$1/stat
UserParameter=rabe.lvm.lv.weight.io.ms[*],awk '{print $$11}' /sys/class/block/$1/stat

